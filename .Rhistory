# layout()
plot_cov(covs = cov_info)
# plot_gc(covs = cov_info)
cov_info$`16GVP045_1`$z7cwn9ai
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
# layout()
plot_cov(covs = cov_info)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
# layout()
plot_cov(covs = covs_selected)
# plot_gc(covs = cov_info)
devtools::document()
devtools::document()
library(plantvirusdetection)
library(plantvirusdetection)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
letters
library(plantvirusdetection)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
?letters
library(plantvirusdetection)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
library(plantvirusdetection)
head(GCdf)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(iimi)
library(plantvirusdetection)
library(Biostrings)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
devtools::document()
devtools::document()
library(iimi)
library(iimi)
library(Biostrings)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
devtools::document()
library(iimi)
library(Biostrings)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
GCdf[GCdf$seg_id == "r8ustu6w",]
devtools::document()
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
library(iimi)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
>
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
str(GCdf)
devtools::document()
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
library(iimi)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
head(df)
devtools::document()
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
str(as.character(detection_result))
str(as.character("dd"))
head(df)
devtools::document()
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
library(tidyverse)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
df$detect_result %>% replace_na("notapplicable")
df
df$detect_result %>% replace_na("notapplicable")
df$detect_result %>% replace_na(detect_resul = "notapplicable")
df$detect_result %>% replace_na(detect_result = "notapplicable")
df %>% replace_na(detect_result = "notapplicable")
df
colnames(Df)
colnames(df)
df$detect_result %>% replace_na('notapplicable')
devtools::document()
devtools::document()
library(iimi)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
devtools::document()
library(iimi)
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam", pattern = "bam$", full.names = TRUE, include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
load("C:/Users/dsain/Desktop/CLEANSED/DataWrangling/RData/truth.rda")
View(detection_virus)
View(detection_segment)
save(detection_segment, file = "C:/Users/dsain/Desktop/CLEANSED/plantvirusdetection/data/detection_segment.rda")
devtools::document()
train_x = df[df$sample_id == "16GVP045_1",]
train_y = detection_segment$`16GVP045_1`
View(train_x)
library(iimi)
fit <- train_iimi(train_x = train_x, train_y = train_y)
df[df$seg_id]
df$seg_id
unique(df$seg_id)
train_x
train_x$seg_id
unique(train_x$seg_id)
train_y = detection_segment["16GVP045_1", train_x$seg_id]
train_y = detection_segment[train_x$seg_id, "16GVP045_1"]
train_y
fit <- train_iimi(train_x = train_x, train_y = train_y)
fit <- train_iimi(train_x = train_x, train_y = train_y)
prediction_customized <- predict_iimi(newdata = test_x, method = "xgb", trained_model = fit)
test_x = df[df$sample_id == "22SP009_S6_1",]
test_y = detection_segment[test_y$seg_id, "22SP009_S6_1"]
test_y = detection_segment[test_x$seg_id, "22SP009_S6_1"]
test_x = df[df$sample_id == "22SP009_S6_1",]
test_y = detection_segment[test_x$seg_id, "22SP009_S6_1"]
prediction_customized <- predict_iimi(newdata = test_x, method = "xgb", trained_model = fit)
prediction_default <- predict_iimi(newdata = test_x, method = "xgb")
trained_xgb
confMatrix <- function(sample_names, detection_df, pred_df) {
cM = matrix(0, 2, 2)
for (ii in sample_names) {
vdf = data.frame(matrix(FALSE, nrow = 1563, ncol = 1))
colnames(vdf) = ii
rownames(vdf) = rownames(detection_df)
vv = pred_df[which(pred_df$sample_id==ii),]$virus_name
vv = unique(vv)
if (length(vv) > 0) {
for (jj in vv) {
vdf[jj, ii] = TRUE
}
}
labels = as.factor(detection_df[,ii])
detect = as.factor(vdf[,ii])
if (length(levels(labels)) == 1|length(levels(detect))==1) {
levels(labels)<-c(F, T)
levels(detect)<-c(F, T)
}
mm = table(prediction = detect, ref = labels)
cM = cM+mm
}
return(cM)
}
cm_customized <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_customized)
cm_default <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_default)
accuracy_customized = (cm_customized[1,1]+cm_customized[2,2])/sum(cm_customized)
precision_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[2,1])
recall_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[1,2])
f1_customized = 2*cm_customized[2,2]/(2*cm_customized[2,2]+cm_customized[2,1]+cm_customized[1,2])
accuracy_default = (cm_default[1,1]+cm_default[2,2])/sum(cm_default)
precision_default = cm_default[2,2]/(cm_default[2,2]+cm_default[2,1])
recall_default = cm_default[2,2]/(cm_default[2,2]+cm_default[1,2])
f1_default = 2*cm_default[2,2]/(2*cm_default[2,2]+cm_default[2,1]+cm_default[1,2])
plot(c(accuracy_customized, precision_customized, recall_customized, f1_customized))
plot(c(accuracy_customized, precision_customized, recall_customized, f1_customized))
lines(c(accuracy_default, precision_default, recall_default, f1_default))
confMatrix <- function(sample_names, detection_df, pred_df) {
cM = matrix(0, 2, 2)
for (ii in sample_names) {
vdf = data.frame(matrix(FALSE, nrow = 1563, ncol = 1))
colnames(vdf) = ii
rownames(vdf) = rownames(detection_df)
vv = pred_df[which(pred_df$sample_id==ii),]$virus_name
vv = unique(vv)
if (length(vv) > 0) {
for (jj in vv) {
vdf[jj, ii] = TRUE
}
}
labels = as.factor(detection_df[,ii])
detect = as.factor(vdf[,ii])
if (length(levels(labels)) == 1|length(levels(detect))==1) {
levels(labels)<-c(F, T)
levels(detect)<-c(F, T)
}
mm = table(prediction = detect, ref = labels)
cM = cM+mm
}
return(cM)
}
cm_customized <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_customized)
cm_default <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_default)
accuracy_customized = (cm_customized[1,1]+cm_customized[2,2])/sum(cm_customized)
precision_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[2,1])
recall_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[1,2])
f1_customized = 2*cm_customized[2,2]/(2*cm_customized[2,2]+cm_customized[2,1]+cm_customized[1,2])
accuracy_default = (cm_default[1,1]+cm_default[2,2])/sum(cm_default)
precision_default = cm_default[2,2]/(cm_default[2,2]+cm_default[2,1])
recall_default = cm_default[2,2]/(cm_default[2,2]+cm_default[1,2])
f1_default = 2*cm_default[2,2]/(2*cm_default[2,2]+cm_default[2,1]+cm_default[1,2])
plot(c(accuracy_customized, precision_customized, recall_customized, f1_customized), type = "l", lty = 2)
lines(c(accuracy_default, precision_default, recall_default, f1_default))
prediction_customized
View(prediction_customized)
View(prediction_default)
confMatrix <- function(sample_names, detection_df, pred_df) {
cM = matrix(0, 2, 2)
for (ii in sample_names) {
vdf = data.frame(matrix(FALSE, nrow = 1563, ncol = 1))
colnames(vdf) = ii
rownames(vdf) = rownames(detection_df)
vv = pred_df[which(pred_df$sample_id==ii),]$virus_name
vv = unique(vv)
if (length(vv) > 0) {
for (jj in vv) {
vdf[jj, ii] = TRUE
}
}
labels = as.factor(detection_df[,ii])
detect = as.factor(vdf[,ii])
if (length(levels(labels)) == 1|length(levels(detect))==1) {
levels(labels)<-c(F, T)
levels(detect)<-c(F, T)
}
mm = table(prediction = detect, ref = labels)
cM = cM+mm
}
return(cM)
}
cm_customized <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_customized)
cm_default <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_default)
accuracy_customized = (cm_customized[1,1]+cm_customized[2,2])/sum(cm_customized)
precision_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[2,1])
recall_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[1,2])
f1_customized = 2*cm_customized[2,2]/(2*cm_customized[2,2]+cm_customized[2,1]+cm_customized[1,2])
accuracy_default = (cm_default[1,1]+cm_default[2,2])/sum(cm_default)
precision_default = cm_default[2,2]/(cm_default[2,2]+cm_default[2,1])
recall_default = cm_default[2,2]/(cm_default[2,2]+cm_default[1,2])
f1_default = 2*cm_default[2,2]/(2*cm_default[2,2]+cm_default[2,1]+cm_default[1,2])
plot(c(accuracy_customized, precision_customized, recall_customized, f1_customized), type = "l", lty = 2, ylab = "", xlab = "")
lines(c(accuracy_default, precision_default, recall_default, f1_default))
confMatrix <- function(sample_names, detection_df, pred_df) {
cM = matrix(0, 2, 2)
for (ii in sample_names) {
vdf = data.frame(matrix(FALSE, nrow = 1563, ncol = 1))
colnames(vdf) = ii
rownames(vdf) = rownames(detection_df)
vv = pred_df[which(pred_df$sample_id==ii),]$virus_name
vv = unique(vv)
if (length(vv) > 0) {
for (jj in vv) {
vdf[jj, ii] = TRUE
}
}
labels = as.factor(detection_df[,ii])
detect = as.factor(vdf[,ii])
if (length(levels(labels)) == 1|length(levels(detect))==1) {
levels(labels)<-c(F, T)
levels(detect)<-c(F, T)
}
mm = table(prediction = detect, ref = labels)
cM = cM+mm
}
return(cM)
}
cm_customized <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_customized)
cm_default <- confMatrix(sample_names = unique(test_x$sample_id),
detection_df = detection_virus,
pred_df = prediction_default)
accuracy_customized = (cm_customized[1,1]+cm_customized[2,2])/sum(cm_customized)
precision_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[2,1])
recall_customized = cm_customized[2,2]/(cm_customized[2,2]+cm_customized[1,2])
f1_customized = 2*cm_customized[2,2]/(2*cm_customized[2,2]+cm_customized[2,1]+cm_customized[1,2])
accuracy_default = (cm_default[1,1]+cm_default[2,2])/sum(cm_default)
precision_default = cm_default[2,2]/(cm_default[2,2]+cm_default[2,1])
recall_default = cm_default[2,2]/(cm_default[2,2]+cm_default[1,2])
f1_default = 2*cm_default[2,2]/(2*cm_default[2,2]+cm_default[2,1]+cm_default[1,2])
plot(c(accuracy_customized, precision_customized, recall_customized, f1_customized), type = "l", lty = 2, ylab = "", xlab = "")
lines(c(accuracy_default, precision_default, recall_default, f1_default))
prediction_default <- predict_iimi(newdata = test_x, method = "rf")
prediction_default <- predict_iimi(newdata = test_x, method = "xgb")
devtools::document()
load("C:/Users/dsain/Desktop/CLEANSED/DataWrangling/RData/truth.rda")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
load("C:/Users/dsain/Desktop/CLEANSED/DataWrangling/RData/truth.rda")
library(iimi)
library(Biostrings)
load("C:/Users/dsain/Desktop/CLEANSED/DataWrangling/RData/truth.rda")
path_to_bamfiles <- list.files(path = "C:/Users/dsain/Desktop/CLEANSED/test_bam",
pattern = "bam$", full.names = TRUE,
include.dirs = TRUE)
toy_data <- BAMtocov(path_to_bamfiles, type = "single")
cov_info <- toy_data$cov
df <- toy_data$MLdataframe
head(df)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
plot_cov(covs = covs_selected)
counter = 0
for (ii in 1:10) {}
for (ii in 1:10) {}
for (ii in 1:10) {
print(counter)
}
for (ii in 1:10) {
print(counter)
counter = counter +1
}
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
devtools::document()
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
library(iimi)
devtools::document()
library(iimi)
covs_selected = list()
covs_selected$`16GVP045_1` <- cov_info$`16GVP045_1`[c("4c559wtw", "z7cwn9ai", "7kb0l74n", "5948de0x")]
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
plot_cov(covs = covs_selected)
covs=covs_selected
for (sample in names(covs)) {
counter = 1
for (seg in names(covs[[sample]])) {
plot(covs[[sample]][[seg]], type = "l",
main = paste0(counter, "). ",sample, ": ", GCdf[GCdf$seg_id == seg,1], ",",
GCdf[GCdf$seg_id == seg,2], ",", seg),
ylab = "", cex.main = cex, xlab = "")
if (length(mappability_profile[[seg]]) > 0) {
lines(x = mappability_profile[[seg]],
y = rep(0, length(mappability_profile[[seg]])), col = "red",
lwd = 2.5)
}
if (gc_status) {
gc = rowSums(letterFrequencyInSlidingView(virus_segments[[seg]],
window, c("G", "C")))/window
a = rowSums(letterFrequencyInSlidingView(virus_segments[[seg]],
window, c("A")))/window
plot(gc, type = "l", ylim = c(0,1), xaxt = 'n', xlab = "", ylab = "")
lines(a, lty = 3, col = "dimgrey")
if (legend_status) {
legend(x = "top", legend = c("Untrustworthy region", "GC content",
"A percentage"),
col = c("red", "black", "dimgrey"), lty = c(1,1,3), lwd = 2,
horiz = TRUE, xpd = TRUE, bty="n", inset = c(1,0), cex = cex)
}
}
counter = counter + 1
}
}
cex = 0.7
gc_status = T, legend_status = T, window = 75
gc_status = T
legend_status = T
window = 75
for (sample in names(covs)) {
counter = 1
for (seg in names(covs[[sample]])) {
plot(covs[[sample]][[seg]], type = "l",
main = paste0(counter, "). ",sample, ": ", GCdf[GCdf$seg_id == seg,1], ",",
GCdf[GCdf$seg_id == seg,2], ",", seg),
ylab = "", cex.main = cex, xlab = "")
if (length(mappability_profile[[seg]]) > 0) {
lines(x = mappability_profile[[seg]],
y = rep(0, length(mappability_profile[[seg]])), col = "red",
lwd = 2.5)
}
if (gc_status) {
gc = rowSums(letterFrequencyInSlidingView(virus_segments[[seg]],
window, c("G", "C")))/window
a = rowSums(letterFrequencyInSlidingView(virus_segments[[seg]],
window, c("A")))/window
plot(gc, type = "l", ylim = c(0,1), xaxt = 'n', xlab = "", ylab = "")
lines(a, lty = 3, col = "dimgrey")
if (legend_status) {
legend(x = "top", legend = c("Untrustworthy region", "GC content",
"A percentage"),
col = c("red", "black", "dimgrey"), lty = c(1,1,3), lwd = 2,
horiz = TRUE, xpd = TRUE, bty="n", inset = c(1,0), cex = cex)
}
}
counter = counter + 1
}
}
par(mar = c(1,2,1,1))
layout(matrix(c(1,1,2,5,5,6,3,3,4,7,7,8), nrow = 6))
for (sample in names(covs)) {
counter = 1
for (seg in names(covs[[sample]])) {
plot(covs[[sample]][[seg]], type = "l",
main = paste0(counter, "). ",sample, ": ", GCdf[GCdf$seg_id == seg,1], ",",
GCdf[GCdf$seg_id == seg,2], ",", seg),
ylab = "", cex.main = cex, xlab = "")
if (length(mappability_profile[[seg]]) > 0) {
lines(x = mappability_profile[[seg]],
y = rep(0, length(mappability_profile[[seg]])), col = "red",
lwd = 2.5)
}
if (gc_status) {
gc = rowSums(letterFrequencyInSlidingView(virus_segments[[seg]],
window, c("G", "C")))/window
a = rowSums(letterFrequencyInSlidingView(virus_segments[[seg]],
window, c("A")))/window
plot(gc, type = "l", ylim = c(0,1), xaxt = 'n', xlab = "", ylab = "")
lines(a, lty = 3, col = "dimgrey")
if (legend_status) {
legend(x = "top", legend = c("Untrustworthy region", "GC content",
"A percentage"),
col = c("red", "black", "dimgrey"), lty = c(1,1,3), lwd = 2,
horiz = TRUE, xpd = TRUE, bty="n", inset = c(1,0), cex = cex)
}
}
counter = counter + 1
}
}
